{
  "_args": [
    [
      {
        "raw": "react-native-tab-view@^1.0.0",
        "scope": null,
        "escapedName": "react-native-tab-view",
        "name": "react-native-tab-view",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/sean.kearney/grace/node_modules/react-navigation-tabs"
    ]
  ],
  "_from": "react-native-tab-view@^1.0.0",
  "_hasShrinkwrap": false,
  "_id": "react-native-tab-view@1.2.0",
  "_location": "/react-navigation-tabs/react-native-tab-view",
  "_nodeVersion": "8.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-tab-view_1.2.0_1537978588232_0.3700588882884992"
  },
  "_npmUser": {
    "name": "satya164",
    "email": "satyajit.happy@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-tab-view@^1.0.0",
    "scope": null,
    "escapedName": "react-native-tab-view",
    "name": "react-native-tab-view",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-navigation-tabs"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-tab-view/-/react-native-tab-view-1.2.0.tgz",
  "_shasum": "0cc26a1c8e49b6c0d58a30363dbbe43954907c31",
  "_shrinkwrap": null,
  "_spec": "react-native-tab-view@^1.0.0",
  "_where": "/Users/sean.kearney/grace/node_modules/react-navigation-tabs",
  "author": {
    "name": "Satyajit Sahoo",
    "email": "satyajit.happy@gmail.com",
    "url": "https://github.com/satya164/"
  },
  "bugs": {
    "url": "https://github.com/react-native-community/react-native-tab-view/issues"
  },
  "dependencies": {
    "prop-types": "^15.6.1"
  },
  "description": "Tab view component for React Native",
  "devDependencies": {
    "@expo/vector-icons": "^6.3.1",
    "babel-jest": "^22.4.4",
    "babel-preset-react-native": "^4.0.0",
    "enzyme": "3.3.0",
    "enzyme-adapter-react-16": "^1.1.1",
    "enzyme-to-json": "^3.3.4",
    "eslint": "^4.19.1",
    "eslint-config-satya164": "^1.0.2",
    "eslint-plugin-react-native-globals": "^0.1.2",
    "flow-bin": "~0.67.1",
    "husky": "^0.14.3",
    "jest": "^22.4.4",
    "prettier": "^1.13.4",
    "react": "16.3.1",
    "react-dom": "16.3.1",
    "react-native": "~0.55.4",
    "react-test-renderer": "16.3.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-lpiWi3dog86Fu/W60DU12RKrFv3XuTv0lHMC56t2jlDqxLfVzG9ufV7li6Afl2S2ZicNU1Bob8WPgxVZc8egAA==",
    "shasum": "0cc26a1c8e49b6c0d58a30363dbbe43954907c31",
    "tarball": "https://registry.npmjs.org/react-native-tab-view/-/react-native-tab-view-1.2.0.tgz",
    "fileCount": 16,
    "unpackedSize": 68486,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbq7DdCRA9TVsSAnZWagAAAIoP/1AzveciaDSMqB6F2Qpk\nEgkNjFcMxwmrQkuC0LsdLdumXHw8QfOfOM3AzJbMovnbq9c4BcHnBUN9XFfD\nQ9cL6tivhxUn2cMDL9sZsvfcqrv4FOUovZ2Hwg8cch/vAdugOA6G8kPkNFM1\nwziSjtapz2SQGUa0TacJh4XtjMATbaP42oJ1nd3GLgzJvUq0qvcNFREVYKVG\nI6vE/l8geoKk09eZF+z7Av1T0JNJSU8ciih4VgTCLVJuDIEzGyRK5FopljZm\naGR2DGxaFgigbdXnQrgpkUdxmxYyuRHfyi/FG99VCtpLlFYkovDo6jsfxfK0\nPh/A2ANTPTwqetiQR6UcgZg0yrhvwRsFKwKYQl8J4caALiIfQ6X3lCj9n36t\nTjp9tdrNIeySD5GQ4fZu69f96wtxMQQgNKRaAjYbMSpbJAAAQc98hYTr8wqh\nloijSWtxT+SQk6qP5JRbWg5i4qMHo5EAyD3UwthnpjYDDsmo68XH00zFSEVG\nhm2qiN1ZXOSbQZYT5sYO2jIiy2AHBbRIZ8Cab6mAXfyR//6WMpu+v8UqfcRo\nO+BcJnGPXbekD5vyQiHBAboSGbS9SL3ghBvnmHcrk0t12hiO78qVfNc+WvVj\nrxJywCxQxcn3jyn1aC6dNxv9WxNfVH07jvxjbPulTW0AD8GIB0GLK5tC1BAt\ng4dQ\r\n=DPxX\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "src/"
  ],
  "gitHead": "46cc247466f4c93e934aa320d546065feb934a61",
  "homepage": "https://github.com/react-native-community/react-native-tab-view#readme",
  "jest": {
    "preset": "react-native",
    "setupFiles": [
      "<rootDir>/__setup__/enzyme.js"
    ],
    "modulePathIgnorePatterns": [
      "<rootDir>/example/node_modules"
    ],
    "snapshotSerializers": [
      "enzyme-to-json/serializer"
    ]
  },
  "keywords": [
    "react-native-component",
    "react-component",
    "react-native",
    "ios",
    "android",
    "tab",
    "swipe",
    "scrollable",
    "coverflow"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "brentvatne",
      "email": "brentvatne@gmail.com"
    },
    {
      "name": "grabbou",
      "email": "grabbou@gmail.com"
    },
    {
      "name": "knowbody",
      "email": "mateuszzatorski@gmail.com"
    },
    {
      "name": "satya164",
      "email": "satyajit.happy@gmail.com"
    }
  ],
  "name": "react-native-tab-view",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "*",
    "react-native": "*"
  },
  "readme": "# React Native Tab View\n\n[![Build Status][build-badge]][build]\n[![Version][version-badge]][package]\n[![MIT License][license-badge]][license]\n\nA cross-platform Tab View component for React Native.\n\nThis is a JavaScript-only implementation of swipeable tab views. It's super customizable, allowing you to do things like coverflow.\n\n- [Run the example app to see it in action](https://expo.io/@satya164/react-native-tab-view-demos).\n- Checkout the [example/](https://github.com/react-native-community/react-native-tab-view/tree/master/example) folder for source code.\n\n## Features\n\n- Smooth animations and gestures\n- Scrollable tabs\n- Supports both top and bottom tab bars\n- Follows Material Design spec\n- Highly customizable\n- Fully typed with [Flow](https://flow.org/)\n\n## Demo\n\n<a href=\"https://raw.githubusercontent.com/satya164/react-native-tab-view/master/demo/demo.mp4\"><img src=\"https://raw.githubusercontent.com/satya164/react-native-tab-view/master/demo/demo.gif\" width=\"360\"></a>\n\n## Installation\n\n```sh\nyarn add react-native-tab-view\n```\n\n## Quick Start\n\n```js\nimport * as React from 'react';\nimport { View, StyleSheet, Dimensions } from 'react-native';\nimport { TabView, TabBar, SceneMap } from 'react-native-tab-view';\n\nconst FirstRoute = () => (\n  <View style={[styles.container, { backgroundColor: '#ff4081' }]} />\n);\nconst SecondRoute = () => (\n  <View style={[styles.container, { backgroundColor: '#673ab7' }]} />\n);\n\nexport default class TabViewExample extends React.Component {\n  state = {\n    index: 0,\n    routes: [\n      { key: 'first', title: 'First' },\n      { key: 'second', title: 'Second' },\n    ],\n  };\n\n  render() {\n    return (\n      <TabView\n        navigationState={this.state}\n        renderScene={SceneMap({\n          first: FirstRoute,\n          second: SecondRoute,\n        })}\n        onIndexChange={index => this.setState({ index })}\n        initialLayout={{ width: Dimensions.get('window').width }}\n      />\n    );\n  }\n}\n```\n\n## Integration with React Navigation\n\nReact Navigation integration can be achieved by the [react-navigation-tabs](https://github.com/react-navigation/react-navigation-tabs) package. Note that while it's easier to use, it is not as flexible as using the library directly.\n\n## Examples on Snack\n\n- [Quick Start](https://snack.expo.io/@satya164/react-native-tab-view-quick-start)\n- [Custom Tab Bar](https://snack.expo.io/@satya164/custom-tabbar-example)\n\n## API reference\n\nThe package exports a `TabView` component which is the one you'd use to render the tab view, a `TabBar` component which is the default tab bar implementation, as well as several pager components for more fine-grained control.\n\nIn a trivial app, you'd mostly only use `TabView` and `TabBar`.\n\n### `<TabView />`\n\nContainer component responsible for rendering and managing tabs.\n\n#### Example\n\n```js\n<TabView\n  navigationState={this.state}\n  onIndexChange={index => this.setState({ index })}\n  renderScene={SceneMap({\n    first: FirstRoute,\n    second: SecondRoute,\n  })}\n/>\n```\n\n#### Props\n\n- `navigationState` (required): the current navigation state, should contain a `routes` array containing the list of tabs, and an `index` property representing the current tab.\n- `onIndexChange` (required): callback for when the current tab index changes, should update the navigation state.\n- `renderScene` (required): callback which returns a React Element to use as the scene for a tab.\n- `renderTabBar`: callback which returns a custom React Element to use as the tab bar.\n- `renderPager`: callback which returns a custom React Element to handle swipe gesture and animation.\n- `canJumpToTab`: callback which returns a boolean indicating whether jumping to the tab is allowed.\n- `initialLayout`: object containing the initial `height` and `width`, can be passed to prevent the one frame delay in rendering.\n- `tabBarPosition`: position of the tab bar, `'top'` or `'bottom'`. Defaults to `'top'`.\n\nAny other props are passed to the underlying pager.\n\n### `<TabBar />`\n\nMaterial design themed tab bar. To pass props to the tab bar, you'd need to use the `renderTabBar` prop of `TabView` to render the `TabBar` and pass additional props.\n\n#### Example\n\n```js\nrenderTabBar={props =>\n  <TabBar\n    {...props}\n    indicatorStyle={{ backgroundColor: 'pink' }}\n  />\n}\n```\n\n#### Props\n\n- `getLabelText`: callback which returns the label text to use for a tab. Defaults to uppercased route title.\n- `getAccessible`: callback which returns a boolean to indicate whether to mark a tab as `accessible`. Defaults to `true`.\n- `getAccessibilityLabel`: callback which returns an accessibility label for the tab. Defaults to route title.\n- `getTestID`: callback which returns a test id for the tab.\n- `renderIcon`: callback which returns a custom React Element to be used as a icon.\n- `renderLabel`: callback which returns a custom React Element to be used as a label.\n- `renderIndicator`: callback which returns a custom React Element to be used as a tab indicator.\n- `renderBadge`: callback which returns a custom React Element to be used as a badge.\n- `onTabPress`: callback invoked on tab press, useful for things like scroll to top.\n- `onTabLongPress`: callback invoked on tab long-press, for example to show a drawer with more options.\n- `pressColor`: color for material ripple (Android >= 5.0 only).\n- `pressOpacity`: opacity for pressed tab (iOS and Android < 5.0 only).\n- `scrollEnabled`: whether to enable scrollable tabs.\n- `bounces`: whether the tab bar bounces when scrolling.\n- `useNativeDriver`: whether to use native animations.\n- `tabStyle`: style object for the individual tabs in the tab bar.\n- `indicatorStyle`: style object for the active indicator.\n- `labelStyle`: style object for the tab item label.\n- `style`: style object for the tab bar.\n\n### `<PagerPan />`\n\nCross-platform pager based on the [`PanResponder`](https://facebook.github.io/react-native/docs/panresponder.html).\n\n#### Props\n\n- `animationEnabled`: whether to enable page change animation.\n- `swipeEnabled`: whether to enable swipe gestures.\n- `swipeDistanceThreshold`: minimum swipe distance to trigger page switch.\n- `swipeVelocityThreshold`: minimum swipe velocity to trigger page switch.\n- `onSwipeStart`: optional callback when a swipe gesture starts.\n- `onSwipeEnd`: optional callback when a swipe gesture ends.\n- `onAnimationEnd`: optional callback when the transition animation ends.\n- `getTestID`: optional callback which receives the current scene and returns a test id for the tab.\n- `children`: React Element(s) to render.\n\n### `<PagerScroll />`\n\nCross-platform pager based on [`ScrollView`](https://facebook.github.io/react-native/docs/scrollview.html) (default on iOS).\n\n#### Props\n\n- `animationEnabled`: whether to enable page change animation.\n- `swipeEnabled`: whether to enable swipe gestures.\n- `onSwipeStart`: optional callback when a swipe gesture starts.\n- `onSwipeEnd`: optional callback when a swipe gesture ends.\n- `onAnimationEnd`: optional callback when the transition animation ends.\n- `getTestID`: optional callback which receives the current scene and returns a test id for the tab.\n- `children`: React Element(s) to render.\n\nThere are some caveats when using this pager on Android, such as poor support for intial index other than `0` and weird animation curves.\n\n### `<PagerAndroid />`\n\nAndroid only pager based on `ViewPagerAndroid` (default on Android).\n\n#### Props\n\n- `animationEnabled`: whether to enable page change animation.\n- `swipeEnabled`: whether to enable swipe gestures.\n- `onSwipeStart`: optional callback when a swipe gesture starts.\n- `onSwipeEnd`: optional callback when a swipe gesture ends.\n- `onAnimationEnd`: optional callback when the transition animation ends.\n- `keyboardDismissMode`: whether the keyboard gets dismissed in response to a drag in [ViewPagerAndroid](https://facebook.github.io/react-native/docs/viewpagerandroid.html#keyboarddismissmode) (Default: `on-drag`).\n- `getTestID`: optional callback which receives the current scene and returns a test id for the tab.\n- `children`: React Element(s) to render.\n\n### `<PagerExperimental />`\n\nCross-platform pager component based on [`react-native-gesture-handler`](https://github.com/kmagiera/react-native-gesture-handler).\n\n#### Props\n\n- `GestureHandler`: the gesture handler module to use.\n- `animationEnabled`: whether to enable page change animation.\n- `swipeEnabled`: whether to enable swipe gestures.\n- `onSwipeStart`: optional callback when a swipe gesture starts.\n- `onSwipeEnd`: optional callback when a swipe gesture ends.\n- `onAnimationEnd`: optional callback when the transition animation ends.\n- `useNativeDriver`: whether to use native animations.\n- `getTestID`: optional callback which receives the current scene and returns a test id for the tab.\n- `children`: React Element(s) to render.\n\nThis pager is still experimental. To use this pager, you'll need to [link the `react-native-gesture-handler` library](https://github.com/kmagiera/react-native-gesture-handler#installation), and pass it as a prop to the pager:\n\n```js\nimport * as GestureHandler from 'react-native-gesture-handler';\n\n...\n\n<PagerExperimental {...props} GestureHandler={GestureHandler} />\n```\n\n### `SceneMap`\n\nHelper function which takes an object with the mapping of `route.key` to React components and returns a function to use with `renderScene` prop.\n\n```js\nrenderScene = SceneMap({\n  first: FirstRoute,\n  second: SecondRoute,\n});\n```\n\nEach scene receives the following props:\n\n- `route`: the current route rendered by the component\n- `jumpTo`: method to jump to other tabs, takes a `route.key` as it's argument\n\nAll the scenes rendered with `SceneMap` are optimized using `React.PureComponent` and don't re-render when parent's props or states change. If you don't want this behaviour, or want to pass additional props to your scene components, use `renderScene` directly instead of using `SceneMap`.\n\n```js\nrenderScene = ({ route }) => {\n  switch (route.key) {\n    case 'first':\n      return <FirstRoute />;\n    case 'second':\n      return <SecondRoute />;\n    default:\n      return null;\n  }\n}\n```\n\nIf you don't use `SceneMap`, you will need to take care of optimizing the individual scenes.\n\n## Optimization Tips\n\n### Use native driver\n\nUsing native animations and gestures can greatly improve the performance. To use native animations and gestures, you will need to use `PagerExperimental` as your pager and pass `useNativeDriver` in `TabView`.\n\n```js\n<TabView\n  navigationState={this.state}\n  renderPager={this._renderPager}\n  renderScene={this._renderScene}\n  renderTabBar={this._renderTabBar}\n  onIndexChange={this._handleIndexChange}\n  useNativeDriver\n/>\n```\n\n_NOTE:_ Native animations are supported only for properties such as `opacity` and `translation`. If you are using a custom tab bar or indicator, you need to make sure that you animate only these style properties.\n\n### Avoid unnecessary re-renders\n\nThe `renderScene` function is called every time the index changes. If your `renderScene` function is expensive, it's good idea move each route to a separate component if they don't depend on the index, and apply `shouldComponentUpdate` to prevent unnecessary re-renders.\n\nFor example, instead of:\n\n```js\nrenderScene = ({ route }) => {\n  switch (route.key) {\n    case 'home':\n      return (\n        <View style={styles.page}>\n          <Avatar />\n          <NewsFeed />\n        </View>\n      );\n    default:\n      return null;\n  }\n};\n```\n\nDo the following:\n\n```js\nrenderScene = ({ route }) => {\n  switch (route.key) {\n    case 'home':\n      return <HomeComponent />;\n    default:\n      return null;\n  }\n};\n```\n\nWhere `<HomeComponent />` is a `PureComponent`.\n\n### Avoid one frame delay\n\nWe need to measure the width of the container and hence need to wait before rendering some elements on the screen. If you know the initial width upfront, you can pass it in and we won't need to wait for measuring it. Most of the time, it's just the window width.\n\nFor example, pass the following `initialLayout` to `TabView`:\n\n```js\nconst initialLayout = {\n  height: 0,\n  width: Dimensions.get('window').width,\n};\n```\n\nThe tab view will still react to changes in the dimension and adjust accordingly to accommodate things like orientation change.\n\n### Optimize large number of routes\n\nIf you've a large number of routes, especially images, it can slow the animation down a lot. You can instead render a limited number of routes.\n\nFor example, do the following to render only 2 routes on each side:\n\n```js\nrenderScene = ({ route }) => {\n  if (Math.abs(this.state.index - this.state.routes.indexOf(route)) > 2) {\n    return <View />;\n  }\n\n  return <MySceneComponent route={route} />;\n};\n```\n\n## Contributing\n\nWhile developing, you can run the [example app](/example/README.md) to test your changes.\n\nMake sure the tests still pass, and your code passes Flow and ESLint. Run the following to verify:\n\n```sh\nyarn test\nyarn flow\nyarn lint\n```\n\nTo fix formatting errors, run the following:\n\n```sh\nyarn lint -- --fix\n```\n\nRemember to add tests for your change if possible.\n\n<!-- badges -->\n\n[build-badge]: https://img.shields.io/circleci/project/github/react-native-community/react-native-tab-view/master.svg?style=flat-square\n[build]: https://circleci.com/gh/react-native-community/react-native-tab-view\n[version-badge]: https://img.shields.io/npm/v/react-native-tab-view.svg?style=flat-square\n[package]: https://www.npmjs.com/package/react-native-tab-view\n[license-badge]: https://img.shields.io/npm/l/react-native-tab-view.svg?style=flat-square\n[license]: https://opensource.org/licenses/MIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/react-native-community/react-native-tab-view.git"
  },
  "scripts": {
    "flow": "flow",
    "lint": "eslint .",
    "precommit": "yarn lint && yarn flow && yarn test",
    "test": "jest"
  },
  "version": "1.2.0"
}
